// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.github.inputs.RepositorySecurityAndAnalysisAdvancedSecurityArgs;
import com.pulumi.github.inputs.RepositorySecurityAndAnalysisSecretScanningArgs;
import com.pulumi.github.inputs.RepositorySecurityAndAnalysisSecretScanningPushProtectionArgs;
import java.util.Objects;


public final class RepositorySecurityAndAnalysisArgs extends com.pulumi.resources.ResourceArgs {

    public static final RepositorySecurityAndAnalysisArgs Empty = new RepositorySecurityAndAnalysisArgs();

    /**
     * The advanced security configuration for the repository. See Advanced Security Configuration below for details.
     * 
     */
    @Import(name="advancedSecurity", required=true)
    private Output<RepositorySecurityAndAnalysisAdvancedSecurityArgs> advancedSecurity;

    /**
     * @return The advanced security configuration for the repository. See Advanced Security Configuration below for details.
     * 
     */
    public Output<RepositorySecurityAndAnalysisAdvancedSecurityArgs> advancedSecurity() {
        return this.advancedSecurity;
    }

    /**
     * The secret scanning configuration for the repository. See Secret Scanning Configuration below for details.
     * 
     */
    @Import(name="secretScanning", required=true)
    private Output<RepositorySecurityAndAnalysisSecretScanningArgs> secretScanning;

    /**
     * @return The secret scanning configuration for the repository. See Secret Scanning Configuration below for details.
     * 
     */
    public Output<RepositorySecurityAndAnalysisSecretScanningArgs> secretScanning() {
        return this.secretScanning;
    }

    /**
     * The secret scanning push protection configuration for the repository. See Secret Scanning Push Protection Configuration below for details.
     * 
     */
    @Import(name="secretScanningPushProtection", required=true)
    private Output<RepositorySecurityAndAnalysisSecretScanningPushProtectionArgs> secretScanningPushProtection;

    /**
     * @return The secret scanning push protection configuration for the repository. See Secret Scanning Push Protection Configuration below for details.
     * 
     */
    public Output<RepositorySecurityAndAnalysisSecretScanningPushProtectionArgs> secretScanningPushProtection() {
        return this.secretScanningPushProtection;
    }

    private RepositorySecurityAndAnalysisArgs() {}

    private RepositorySecurityAndAnalysisArgs(RepositorySecurityAndAnalysisArgs $) {
        this.advancedSecurity = $.advancedSecurity;
        this.secretScanning = $.secretScanning;
        this.secretScanningPushProtection = $.secretScanningPushProtection;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RepositorySecurityAndAnalysisArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RepositorySecurityAndAnalysisArgs $;

        public Builder() {
            $ = new RepositorySecurityAndAnalysisArgs();
        }

        public Builder(RepositorySecurityAndAnalysisArgs defaults) {
            $ = new RepositorySecurityAndAnalysisArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param advancedSecurity The advanced security configuration for the repository. See Advanced Security Configuration below for details.
         * 
         * @return builder
         * 
         */
        public Builder advancedSecurity(Output<RepositorySecurityAndAnalysisAdvancedSecurityArgs> advancedSecurity) {
            $.advancedSecurity = advancedSecurity;
            return this;
        }

        /**
         * @param advancedSecurity The advanced security configuration for the repository. See Advanced Security Configuration below for details.
         * 
         * @return builder
         * 
         */
        public Builder advancedSecurity(RepositorySecurityAndAnalysisAdvancedSecurityArgs advancedSecurity) {
            return advancedSecurity(Output.of(advancedSecurity));
        }

        /**
         * @param secretScanning The secret scanning configuration for the repository. See Secret Scanning Configuration below for details.
         * 
         * @return builder
         * 
         */
        public Builder secretScanning(Output<RepositorySecurityAndAnalysisSecretScanningArgs> secretScanning) {
            $.secretScanning = secretScanning;
            return this;
        }

        /**
         * @param secretScanning The secret scanning configuration for the repository. See Secret Scanning Configuration below for details.
         * 
         * @return builder
         * 
         */
        public Builder secretScanning(RepositorySecurityAndAnalysisSecretScanningArgs secretScanning) {
            return secretScanning(Output.of(secretScanning));
        }

        /**
         * @param secretScanningPushProtection The secret scanning push protection configuration for the repository. See Secret Scanning Push Protection Configuration below for details.
         * 
         * @return builder
         * 
         */
        public Builder secretScanningPushProtection(Output<RepositorySecurityAndAnalysisSecretScanningPushProtectionArgs> secretScanningPushProtection) {
            $.secretScanningPushProtection = secretScanningPushProtection;
            return this;
        }

        /**
         * @param secretScanningPushProtection The secret scanning push protection configuration for the repository. See Secret Scanning Push Protection Configuration below for details.
         * 
         * @return builder
         * 
         */
        public Builder secretScanningPushProtection(RepositorySecurityAndAnalysisSecretScanningPushProtectionArgs secretScanningPushProtection) {
            return secretScanningPushProtection(Output.of(secretScanningPushProtection));
        }

        public RepositorySecurityAndAnalysisArgs build() {
            $.advancedSecurity = Objects.requireNonNull($.advancedSecurity, "expected parameter 'advancedSecurity' to be non-null");
            $.secretScanning = Objects.requireNonNull($.secretScanning, "expected parameter 'secretScanning' to be non-null");
            $.secretScanningPushProtection = Objects.requireNonNull($.secretScanningPushProtection, "expected parameter 'secretScanningPushProtection' to be non-null");
            return $;
        }
    }

}
