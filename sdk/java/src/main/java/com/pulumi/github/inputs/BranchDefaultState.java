// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.github.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BranchDefaultState extends com.pulumi.resources.ResourceArgs {

    public static final BranchDefaultState Empty = new BranchDefaultState();

    /**
     * The branch (e.g. `main`)
     * 
     */
    @Import(name="branch")
    private @Nullable Output<String> branch;

    /**
     * @return The branch (e.g. `main`)
     * 
     */
    public Optional<Output<String>> branch() {
        return Optional.ofNullable(this.branch);
    }

    /**
     * The GitHub repository
     * 
     */
    @Import(name="repository")
    private @Nullable Output<String> repository;

    /**
     * @return The GitHub repository
     * 
     */
    public Optional<Output<String>> repository() {
        return Optional.ofNullable(this.repository);
    }

    private BranchDefaultState() {}

    private BranchDefaultState(BranchDefaultState $) {
        this.branch = $.branch;
        this.repository = $.repository;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BranchDefaultState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BranchDefaultState $;

        public Builder() {
            $ = new BranchDefaultState();
        }

        public Builder(BranchDefaultState defaults) {
            $ = new BranchDefaultState(Objects.requireNonNull(defaults));
        }

        /**
         * @param branch The branch (e.g. `main`)
         * 
         * @return builder
         * 
         */
        public Builder branch(@Nullable Output<String> branch) {
            $.branch = branch;
            return this;
        }

        /**
         * @param branch The branch (e.g. `main`)
         * 
         * @return builder
         * 
         */
        public Builder branch(String branch) {
            return branch(Output.of(branch));
        }

        /**
         * @param repository The GitHub repository
         * 
         * @return builder
         * 
         */
        public Builder repository(@Nullable Output<String> repository) {
            $.repository = repository;
            return this;
        }

        /**
         * @param repository The GitHub repository
         * 
         * @return builder
         * 
         */
        public Builder repository(String repository) {
            return repository(Output.of(repository));
        }

        public BranchDefaultState build() {
            return $;
        }
    }

}
